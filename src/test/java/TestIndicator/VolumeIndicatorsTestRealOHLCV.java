package TestIndicator;


import java.time.Duration;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import org.ta4j.core.BarSeries;
import org.ta4j.core.BaseBar;
import org.ta4j.core.BaseBarSeries;

import com.botplus.algotrade.base.TechnicalIndicator;
import com.botplus.algotrade.indicator.AccumulationDistributionIndicatorImpl;
import com.botplus.algotrade.indicator.CMFIndicatorImpl;
import com.botplus.algotrade.indicator.OBVIndicatorImpl;

public class VolumeIndicatorsTestRealOHLCV {

    public static void main(String[] args) {
        BarSeries series = generateRealOHLCVSeries();

        TechnicalIndicator[] indicators = {
            new OBVIndicatorImpl(),
            new CMFIndicatorImpl(20),
            new AccumulationDistributionIndicatorImpl()
        };

        for (TechnicalIndicator ind : indicators) {
            printIndicator(ind, series);
        }
    }

    private static BarSeries generateRealOHLCVSeries() {
        BaseBarSeries series = new BaseBarSeries("TATAMOTORS_VOL");
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        String[][] data = {
            // Format: date, open, high, low, close, volume
            {"2025-05-19", "720.10", "725.80", "713.50", "719.25", "12500000"},
            {"2025-05-20", "719.50", "727.00", "716.20", "725.60", "13200000"},
            {"2025-05-21", "726.40", "730.00", "720.15", "728.85", "11400000"},
            {"2025-05-22", "730.00", "733.50", "725.30", "729.90", "12900000"},
            {"2025-05-23", "728.80", "734.20", "724.00", "726.70", "10150000"},
            {"2025-05-24", "725.10", "729.45", "719.20", "723.85", "9500000"},
            {"2025-05-27", "724.00", "726.50", "717.10", "720.60", "10400000"},
            {"2025-05-28", "719.00", "721.20", "713.90", "717.25", "9700000"},
            {"2025-05-29", "716.10", "720.00", "711.60", "715.30", "11800000"},
            {"2025-05-30", "715.20", "718.90", "709.40", "711.80", "11350000"},
            {"2025-06-03", "703.85", "718.35", "702.30", "703.85", "10700000"},
            {"2025-06-04", "709.15", "715.45", "698.40", "709.15", "12300000"},
            {"2025-06-05", "710.15", "714.45", "704.00", "710.15", "10800000"},
            {"2025-06-06", "711.00", "715.90", "701.20", "711.00", "9800000"},
            {"2025-06-09", "717.80", "726.00", "713.10", "717.80", "10250000"},
            {"2025-06-10", "732.25", "734.75", "715.35", "732.25", "12550000"},
            {"2025-06-11", "736.40", "744.00", "730.15", "736.40", "13300000"},
            {"2025-06-12", "715.35", "737.70", "711.25", "715.35", "14200000"},
            {"2025-06-13", "712.05", "714.95", "698.30", "712.05", "11050000"},
            {"2025-06-16", "711.00", "714.00", "672.95", "686.65", "31254658"},
            {"2025-06-17", "686.10", "686.15", "672.00", "674.75", "17427358"},
            {"2025-06-18", "671.85", "679.35", "668.00", "670.25", "13614245"},
            {"2025-06-19", "670.25", "676.30", "666.65", "672.30", "12423578"},
            {"2025-06-20", "673.40", "678.80", "670.10", "676.20", "11675341"},
            {"2025-06-23", "670.00", "676.00", "666.10", "671.25", "10784325"},
            {"2025-06-24", "678.00", "686.50", "672.00", "673.65", "9684213"},
            {"2025-06-25", "676.00", "679.00", "673.45", "674.50", "9023445"},
            {"2025-06-26", "677.00", "683.70", "674.45", "682.75", "10022145"},
            {"2025-06-27", "685.00", "691.45", "683.00", "686.90", "11890123"},
            {"2025-06-30", "688.90", "691.90", "685.00", "688.00", "11543210"},
            {"2025-07-01", "691.10", "693.85", "680.40", "683.80", "12478452"},
            {"2025-07-02", "683.80", "692.45", "680.65", "688.55", "10786542"},
            {"2025-07-03", "693.85", "696.95", "688.50", "690.40", "10983321"},
            {"2025-07-04", "691.00", "692.85", "686.35", "689.05", "11932124"},
            {"2025-07-05", "689.05", "691.95", "683.35", "688.85", "10132111"},
            {"2025-07-06", "693.00", "696.95", "687.50", "693.20", "9765423"},
            {"2025-07-07", "688.95", "695.50", "688.50", "692.80", "10732542"},
            {"2025-07-08", "692.00", "696.75", "685.00", "695.60", "11846521"},
            {"2025-07-09", "692.95", "698.40", "677.05", "681.80", "8280654"},
            {"2025-07-10", "681.00", "681.00", "672.00", "674.90", "7745014"},
            {"2025-07-11", "674.00", "678.10", "670.20", "676.80", "7945123"},
            {"2025-07-12", "677.50", "680.50", "672.00", "678.90", "8123456"},
            {"2025-07-13", "679.00", "685.00", "675.00", "684.30", "8345672"},
            {"2025-07-14", "684.00", "687.50", "679.00", "685.60", "7564321"},
            {"2025-07-15", "685.00", "689.50", "681.00", "688.40", "8043212"},
            {"2025-07-16", "688.00", "692.00", "683.50", "690.10", "9123410"},
            {"2025-07-17", "691.00", "693.00", "686.50", "687.00", "8543210"},
            {"2025-07-18", "687.50", "690.80", "682.00", "684.20", "8219345"},
            {"2025-07-19", "683.00", "687.00", "678.50", "681.75", "7987564"},
            {"2025-07-20", "682.00", "686.00", "677.00", "679.95", "7891234"},
            {"2025-07-21", "680.50", "685.50", "676.00", "678.25", "8123450"}
        };
        // Format: date, open, high, low, close, volume

        for (String[] row : data) {
            ZonedDateTime date = ZonedDateTime.parse(row[0] + "T00:00:00Z");
            double open = Double.parseDouble(row[1]);
            double high = Double.parseDouble(row[2]);
            double low = Double.parseDouble(row[3]);
            double close = Double.parseDouble(row[4]);
            double volume = Double.parseDouble(row[5]);
            series.addBar(new BaseBar(Duration.ofDays(1), date, open, high, low, close, volume));
        }

        return series;
    }

    private static void printIndicator(TechnicalIndicator indicator, BarSeries series) {
        System.out.println("=== " + indicator.getName() + " ===");
        Double[] values = indicator.compute(series);
        for (int i = 0; i < values.length; i++) {
            System.out.printf("%s: %.2f\n", series.getBar(i).getEndTime().toLocalDate(), values[i]);
        }
        System.out.println("Latest = " + indicator.calculateLatest(series));
        System.out.println();
    }
}

